class Movie < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Movie, ActiveRecord_Relation, Integer]
  def custom_name: () -> Integer
  def ouo: () -> String
  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def title: () -> String

    def title=: (String) -> String

    def title?: () -> bool

    def title_changed?: () -> bool

    def title_change: () -> [ String?, String? ]

    def title_will_change!: () -> void

    def title_was: () -> String?

    def title_previously_changed?: () -> bool

    def title_previous_change: () -> Array[String?]?

    def title_previously_was: () -> String?

    def title_before_last_save: () -> String?

    def title_change_to_be_saved: () -> Array[String?]?

    def title_in_database: () -> String?

    def saved_change_to_title: () -> Array[String?]?

    def saved_change_to_title?: () -> bool

    def will_save_change_to_title?: () -> bool

    def restore_title!: () -> void

    def clear_title_change: () -> void

    def description: () -> String?

    def description=: (String?) -> String?

    def description?: () -> bool

    def description_changed?: () -> bool

    def description_change: () -> [ String?, String? ]

    def description_will_change!: () -> void

    def description_was: () -> String?

    def description_previously_changed?: () -> bool

    def description_previous_change: () -> Array[String?]?

    def description_previously_was: () -> String?

    def description_before_last_save: () -> String?

    def description_change_to_be_saved: () -> Array[String?]?

    def description_in_database: () -> String?

    def saved_change_to_description: () -> Array[String?]?

    def saved_change_to_description?: () -> bool

    def will_save_change_to_description?: () -> bool

    def restore_description!: () -> void

    def clear_description_change: () -> void

    def premiere_date: () -> Date?

    def premiere_date=: (Date?) -> Date?

    def premiere_date?: () -> bool

    def premiere_date_changed?: () -> bool

    def premiere_date_change: () -> [ Date?, Date? ]

    def premiere_date_will_change!: () -> void

    def premiere_date_was: () -> Date?

    def premiere_date_previously_changed?: () -> bool

    def premiere_date_previous_change: () -> Array[Date?]?

    def premiere_date_previously_was: () -> Date?

    def premiere_date_before_last_save: () -> Date?

    def premiere_date_change_to_be_saved: () -> Array[Date?]?

    def premiere_date_in_database: () -> Date?

    def saved_change_to_premiere_date: () -> Array[Date?]?

    def saved_change_to_premiere_date?: () -> bool

    def will_save_change_to_premiere_date?: () -> bool

    def restore_premiere_date!: () -> void

    def clear_premiere_date_change: () -> void

    def country_id: () -> Integer

    def country_id=: (Integer) -> Integer

    def country_id?: () -> bool

    def country_id_changed?: () -> bool

    def country_id_change: () -> [ Integer?, Integer? ]

    def country_id_will_change!: () -> void

    def country_id_was: () -> Integer?

    def country_id_previously_changed?: () -> bool

    def country_id_previous_change: () -> Array[Integer?]?

    def country_id_previously_was: () -> Integer?

    def country_id_before_last_save: () -> Integer?

    def country_id_change_to_be_saved: () -> Array[Integer?]?

    def country_id_in_database: () -> Integer?

    def saved_change_to_country_id: () -> Array[Integer?]?

    def saved_change_to_country_id?: () -> bool

    def will_save_change_to_country_id?: () -> bool

    def restore_country_id!: () -> void

    def clear_country_id_change: () -> void

    def duration_in_minutes: () -> Integer?

    def duration_in_minutes=: (Integer?) -> Integer?

    def duration_in_minutes?: () -> bool

    def duration_in_minutes_changed?: () -> bool

    def duration_in_minutes_change: () -> [ Integer?, Integer? ]

    def duration_in_minutes_will_change!: () -> void

    def duration_in_minutes_was: () -> Integer?

    def duration_in_minutes_previously_changed?: () -> bool

    def duration_in_minutes_previous_change: () -> Array[Integer?]?

    def duration_in_minutes_previously_was: () -> Integer?

    def duration_in_minutes_before_last_save: () -> Integer?

    def duration_in_minutes_change_to_be_saved: () -> Array[Integer?]?

    def duration_in_minutes_in_database: () -> Integer?

    def saved_change_to_duration_in_minutes: () -> Array[Integer?]?

    def saved_change_to_duration_in_minutes?: () -> bool

    def will_save_change_to_duration_in_minutes?: () -> bool

    def restore_duration_in_minutes!: () -> void

    def clear_duration_in_minutes_change: () -> void

    def rate: () -> BigDecimal?

    def rate=: (BigDecimal?) -> BigDecimal?

    def rate?: () -> bool

    def rate_changed?: () -> bool

    def rate_change: () -> [ BigDecimal?, BigDecimal? ]

    def rate_will_change!: () -> void

    def rate_was: () -> BigDecimal?

    def rate_previously_changed?: () -> bool

    def rate_previous_change: () -> Array[BigDecimal?]?

    def rate_previously_was: () -> BigDecimal?

    def rate_before_last_save: () -> BigDecimal?

    def rate_change_to_be_saved: () -> Array[BigDecimal?]?

    def rate_in_database: () -> BigDecimal?

    def saved_change_to_rate: () -> Array[BigDecimal?]?

    def saved_change_to_rate?: () -> bool

    def will_save_change_to_rate?: () -> bool

    def restore_rate!: () -> void

    def clear_rate_change: () -> void

    def number_of_votes: () -> Integer?

    def number_of_votes=: (Integer?) -> Integer?

    def number_of_votes?: () -> bool

    def number_of_votes_changed?: () -> bool

    def number_of_votes_change: () -> [ Integer?, Integer? ]

    def number_of_votes_will_change!: () -> void

    def number_of_votes_was: () -> Integer?

    def number_of_votes_previously_changed?: () -> bool

    def number_of_votes_previous_change: () -> Array[Integer?]?

    def number_of_votes_previously_was: () -> Integer?

    def number_of_votes_before_last_save: () -> Integer?

    def number_of_votes_change_to_be_saved: () -> Array[Integer?]?

    def number_of_votes_in_database: () -> Integer?

    def saved_change_to_number_of_votes: () -> Array[Integer?]?

    def saved_change_to_number_of_votes?: () -> bool

    def will_save_change_to_number_of_votes?: () -> bool

    def restore_number_of_votes!: () -> void

    def clear_number_of_votes_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def roles: () -> Role::ActiveRecord_Associations_CollectionProxy
  def roles=: (Role::ActiveRecord_Associations_CollectionProxy | Array[Role]) -> (Role::ActiveRecord_Associations_CollectionProxy | Array[Role])
  def role_ids: () -> Array[Integer]
  def role_ids=: (Array[Integer]) -> Array[Integer]
  def actors: () -> Actor::ActiveRecord_Associations_CollectionProxy
  def actors=: (Actor::ActiveRecord_Associations_CollectionProxy | Array[Actor]) -> (Actor::ActiveRecord_Associations_CollectionProxy | Array[Actor])
  def actor_ids: () -> Array[Integer]
  def actor_ids=: (Array[Integer]) -> Array[Integer]

  def country: () -> Country
  def country=: (Country?) -> Country?
  def reload_country: () -> Country?
  def build_country: (untyped) -> Country
  def create_country: (untyped) -> Country
  def create_country!: (untyped) -> Country
  # def custom_name: () -> Integer
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Movie, Integer]
    include Enumerable[Movie]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Movie, Integer]
  end
end
