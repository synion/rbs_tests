# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# Represents the abstract base parser class that parses source code in
# a specific way. A parser should implement {#parse}, {#tokenize} and
# {#enumerator}.
#
# == Registering a Custom Parser
# To register a parser, see {SourceParser.register_parser_type}
#
# @abstract
# @see #parse
# @see #tokenize
# @see #enumerator
# @since 0.5.6
class YARD::Parser::Base
  # Convenience method to create a new parser and {#parse}
  def self.parse: (untyped source, ?untyped filename) -> untyped
  # This default constructor does nothing. The subclass is responsible for
  # storing the source contents and filename if they are required.
  # @param [String] source the source contents
  # @param [String] filename the name of the file if from disk
  def initialize: (String source, String filename) -> void
  # This method should be implemented to parse the source and return itself.
  # @abstract
  # @return [Base] this method should return itself
  def parse: () -> YARD::Parser::Base
  # This method should be implemented to tokenize given source
  # @abstract
  # @return [Array] a list/tree of lexical tokens
  def tokenize: () -> Array[untyped]
  # This method should be implemented to return a list of semantic tokens
  # representing the source code to be post-processed. Otherwise the method
  # should return nil.
  #
  # @abstract
  # @return [Array] a list of semantic tokens representing the source code
  #   to be post-processed
  # @return [nil] if no post-processing should be done
  def enumerator: () -> Array[untyped]?
end
