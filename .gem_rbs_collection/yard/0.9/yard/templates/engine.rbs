# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# This module manages all creation, handling and rendering of {Template}
# objects.
#
# * To create a template object at a path, use {template}.
# * To render a template, call {render}.
# * To register a template path in the lookup paths, call {register_template_path}.
module YARD::Templates::Engine
  # @return [Array<String>] the list of registered template paths
  attr_accessor self.template_paths: Array[String]

  # Registers a new template path in {template_paths}
  #
  # @param [String] path a new template path
  # @return [void]
  def self.register_template_path: (String path) -> void

  # Creates a template module representing the path. Searches on disk
  # for the first directory named +path+ (joined by '/') within the
  # template paths and builds a template module for. All other matching
  # directories in other template paths will be included in the
  # generated module as mixins (for overriding).
  #
  # @param [Array<String, Symbol>] path a list of path components
  # @raise [ArgumentError] if the path does not exist within one of the
  #   {template_paths} on disk.
  # @return [Template] the module representing the template
  def self.template: (*Array[String | Symbol] path) -> YARD::Templates::Template

  # Forces creation of a template at +path+ within a +full_path+.
  #
  # @param [String] path the path name of the template
  # @param [Array<String>] full_paths the full path on disk of the template
  # @return [Template] the template module representing the +path+
  def self.template!: (String path, ?Array[String] full_paths) -> YARD::Templates::Template

  # Renders a template on a {CodeObjects::Base code object} using
  # a set of default (overridable) options. Either the +:object+
  # or +:type+ keys must be provided.
  #
  # If a +:serializer+ key is provided and +:serialize+ is not set to
  # false, the rendered contents will be serialized through the {Serializers::Base}
  # object. See {with_serializer}.
  #
  # @example Renders an object with html formatting
  #   Engine.render(:format => :html, :object => obj)
  # @example Renders without an object
  #   Engine.render(:type => :fulldoc, :otheropts => somevalue)
  # @param [Hash] options the options hash
  # @option options [Symbol] :format (:text) the default format
  # @option options [Symbol] :type (nil) the :object's type.
  # @option options [Symbol] :template (:default) the default template
  # @return [String] the rendered template
  def self.render: (?Hash[untyped, untyped] options) -> String

  # Passes a set of objects to the +:fulldoc+ template for full documentation generation.
  # This is called by {CLI::Yardoc} to most commonly perform HTML
  # documentation generation.
  #
  # @param [Array<CodeObjects::Base>] objects a list of {CodeObjects::Base}
  #   objects to pass to the template
  # @param [Hash] options (see {render})
  # @return [void]
  def self.generate: (Array[YARD::CodeObjects::Base] objects, ?Hash[untyped, untyped] options) -> void

  # Serializes the results of a block with a +serializer+ object.
  #
  # @param [CodeObjects::Base] object the code object to serialize
  # @param [Serializers::Base] serializer the serializer object
  # @yield a block whose result will be serialize
  # @yieldreturn [String] the contents to serialize
  # @see Serializers::Base
  def self.with_serializer: (YARD::CodeObjects::Base object, YARD::Serializers::Base serializer) { () -> String } -> untyped

  # Sets default options on the options hash
  #
  # @param [Hash] options the options hash
  # @option options [Symbol] :format (:text) the default format
  # @option options [Symbol] :type (nil) the :object's type, if provided
  # @option options [Symbol] :template (:default) the default template
  # @return [void]
  private def self.set_default_options: (?Hash[untyped, untyped] options) -> void

  # Searches through the registered {template_paths} and returns
  # all full directories that have the +path+ within them on disk.
  #
  # @param [Template] from_template if provided, allows a relative
  #   path to be specified from this template's full path.
  # @param [String] path the path component to search for in the
  #   {template_paths}
  # @return [Array<String>] a list of full paths that are existing
  #   candidates for a template module
  private def self.find_template_paths: (YARD::Templates::Template from_template, String path) -> Array[String]

  # The name of the module that represents a +path+
  #
  # @param [String] path the path to generate a module name for
  # @return [String] the module name
  private def self.template_module_name: (String path) -> String
end
